#The protocol from Andrei Chagin Lab (Tsz Long Chu / Baoyi). Modified it.
library(dplyr)
library(Seurat)
library(patchwork)

poc.data <- Read10X_h5("C:/Users/Emil/10X/growthplate/filtered_feature_bc_matrix_poc.h5", use.names = TRUE, unique.features = TRUE)
poc <- CreateSeuratObject(counts = poc.data, project = "poc", min.cells = 3, min.features = 200)

openR <- function(x){
library(Seurat)
library(patchwork)
library(dplyr)
library(ggplot2)
library(cowplot)
library(reticulate)

library(EnhancedVolcano)
library(DoubletFinder)
library(CytoTRACE)
library(biomaRt)
library(SeuratDisk)
library(SeuratWrappers)
library(Matrix)} 

openR()

convertHumanGeneList <- function(x){
require("biomaRt")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
genesV2 = getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol", values = x , mart = human, attributesL = c("mgi_symbol"), martL = mouse, uniqueRows=T)
humanx <- unique(genesV2[, 2])

# Print the first 6 genes found to the screen

print(head(humanx))
return(humanx)
}

m.s.genes <- convertHumanGeneList(cc.genes.updated.2019$s.genes)

m.g2m.genes <- convertHumanGeneList(cc.genes.updated.2019$g2m.genes)


poc.data <- Read10X_h5("C:/Users/Emil/10X/growthplate/filtered_feature_bc_matrix_poc.h5", use.names = TRUE, unique.features = TRUE)
poc <- CreateSeuratObject(counts = poc.data, project = "poc", min.cells = 3, min.features = 200)
poc[["percent.rb"]] <- PercentageFeatureSet(poc, pattern = "^Rps|^Rpl|^Mrps|^Mrpl", assay = 'RNA')
poc <- CellCycleScoring(poc, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = FALSE)
poc[["percent.mt"]] <- PercentageFeatureSet(poc, pattern = "^mt-")
poc <- ScaleData(poc, verbose = T, vars.to.regress = c('nCount_RNA', 'percent.mt', "percent.rb","S.Score","G2M.Score"))
poc <- subset(poc, subset = nCount_RNA > 1000 & nCount_RNA < 20000 & nFeature_RNA > 600 & nFeature_RNA < 6000 & percent.mt < 15 & percent.rb < 30)
poc <- ProcessSeu(poc)

ProcessSeu <- function(Seurat){
Seurat <- NormalizeData(Seurat)
Seurat <- FindVariableFeatures(Seurat, selection.method = "vst", nfeatures = 2000)
Seurat <- ScaleData(Seurat)
Seurat <- RunPCA(Seurat)
Seurat <- FindNeighbors(Seurat, dims = 1:10)
Seurat <- FindClusters(Seurat, resolution = 0.5)
Seurat <- RunUMAP(Seurat, dims = 1:10)
Seurat <- RunTSNE(Seurat,  dims.use = 1:10 )
DimPlot(object = Seurat, reduction = "umap")
return (Seurat)
}



RDoublet <- function(tmp){
sweep.res.list <- paramSweep_v3(tmp, PCs = 1:30, sct = FALSE)
sweep.stats <- summarizeSweep(sweep.res.list, GT = FALSE)
bcmvn <- find.pK(sweep.stats)
pKopt <- as.numeric(as.character(bcmvn$pK[bcmvn$BCmetric == max(bcmvn$BCmetric)]))
pKopt <- pKopt[order(pKopt, decreasing = TRUE) ]
pKopt <- pKopt[1]
homotypic.prop <- modelHomotypic(tmp$seurat_clusters) 
nExp_poi <- round(0.1*length(colnames(tmp)))  ## Assuming 10% doublet formation rate 
nExp_poi.adj <- round(nExp_poi*(1-homotypic.prop))
tmp <- doubletFinder_v3(tmp, PCs = 1:30, pN = 0.25, pK = pKopt, nExp = nExp_poi, reuse.pANN = FALSE)
tmp <- doubletFinder_v3(tmp, PCs = 1:30, pN = 0.25, pK = pKopt, nExp = nExp_poi.adj, reuse.pANN = paste("pANN_0.25",pKopt,nExp_poi, sep="_"))
return (tmp) 
}

tmp$DF_hi.lo <- tmp@meta.data[,8]
tmp <- subset(tmp, subset = DF_hi.lo == 'Singlet'); tmp

poc <- subset(poc, subset = DF.classifications_0.25_0.005_360 == 'Singlet')


my_list <- list(poc, poc55, soc, soc56)
features <- SelectIntegrationFeatures(object.list = my_list)
immune.anchors <- FindIntegrationAnchors(object.list = my_list, anchor.features = features)
immune.anchors1 <- FindIntegrationAnchors(object.list = list(ctrl, stim), anchor.features = all.genes ,dims = 1:20)

immune.combined <- IntegrateData(anchorset = immune.anchors)
immune.combined <- IntegrateData(anchorset = immune.anchors,features.to.integrate = all.genes, dims = 1:20)

ProcessInt <- function(pancreas.integrated){
pancreas.integrated <- ScaleData(pancreas.integrated, verbose = FALSE)
pancreas.integrated <- RunPCA(pancreas.integrated, npcs = 30, verbose = FALSE)
pancreas.integrated <- FindNeighbors(pancreas.integrated, dims = 1:20)
pancreas.integrated <- FindClusters(pancreas.integrated, resolution = 0.5)
pancreas.integrated <- RunUMAP(pancreas.integrated, reduction = "pca", dims = 1:20)
pancreas.integrated <- RunTSNE(pancreas.integrated,  dims.use = 1:10 )
}

summarydata <- ProcessInt(immune.combined)
